{
arimas[[i]] = auto.arima(dat_i$mortality, xreg = c(dat_i$surv))
log_arimas[[i]] = auto.arima(dat_i$log_mortality, xreg = c(dat_i$surv))
}
summary(arimas[[i]])
summary(log_arimas[[i]])
residuals(log_arimas[[i]])
plot(residuals(log_arimas[[i]]) ~ dat_i$surv)
i
plot(residuals(log_arimas[[i]]) ~ dat_i$surv)
plot(residuals(log_arimas[[i]]) ~ dat_i$surv)
arimas = vector(mode = "list", length = 16)
log_arimas = vector(mode = "list", length = 16)
for (i in 1:16)
{
dat_i = aggregate_means[interval == i]
arimas[[i]] = auto.arima(dat_i$mortality, xreg = c(dat_i$surv))
log_arimas[[i]] = auto.arima(dat_i$log_mortality, xreg = c(dat_i$surv))
}
plot(residuals(log_arimas[[i]]) ~ dat_i$surv)
plot(residuals(log_arimas[[i]]) ~ dat_i$surv)
i
i = 1
plot(residuals(log_arimas[[i]]) ~ dat_i$surv)
i = 10
plot(residuals(log_arimas[[i]]) ~ dat_i$surv)
var.test(arimas[[i]])
arimas[[i]]
arimas[[i]]$coef
arimas[[i]]$coef$xreg
arimas[[i]]$coef
c(arimas[[i]]$coef)
c(arimas[[i]]$coef)[2]
c(arimas[[i]]$coef)["xreg"]
c(log_arimas[[i]]$coef)["xreg"]
sapply(1:16, function(i) c(log_arimas[[i]]$coef)["xreg"])
sapply(1:16, function(i) c(arimas[[i]]$coef)["xreg"])
plot(sapply(1:16, function(i) c(log_arimas[[i]]$coef)["xreg"]) ~ 1:16)
sapply(1:16, function(i) c(log_arimas[[i]]$coef)["xreg"])
log_coefs = sapply(1:16, function(i) c(log_arimas[[i]]$coef)["xreg"])
coefs
log_coefs = sapply(1:16, function(i) c(log_arimas[[i]]$coef)["xreg"])
coefs = sapply(1:16, function(i) c(arimas[[i]]$coef)["xreg"])
length(coefs)
plot(1:16, coefs)
plot(1:16, log_coefs)
require(ggplot2)
require(rgdal)
require(rgeos)
require(raster)
require(ncdf4)
require(data.table)
require(forecast)
data_dir = "C:/github/MPB_Overwintering_Projects/data/"
aggregate_means = fread(paste0(data_dir, "aggregate_forests/aggregate_means.csv"))
aggregate_means$log_mortality = aggregate_means[, log(mortality)]
aggregate_means
gls(mortality ~ surv, data = aggregate_means, correlation = corAR1(form = ~year))
require(nlme)
gls(mortality ~ surv, data = aggregate_means, correlation = corAR1(form = ~year))
aggregate_means
interval = 4
aggregate_means[interval == interval]
intvl = 4
aggregate_means[interval == intvl]
gls(mortality ~ surv, data = aggregate_means, correlation = corAR1(form = ~year))
gls(mortality ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
intvl = 1
gls(mortality ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
intvl = 7
gls(mortality ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
fit1 = gls(mortality ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
str(fit1)
fit1$residuals
fit1 = gls(mortality ~ log(surv), data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
fit1$residuals
summary(fit1)
fit1 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
str(fit1)
summary(fit1)
fit1$residuals
intvl = 1
summary(fit1)
fit1 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl]))
fit1 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl])
summary(fit1)
fit1_1 = lm(log(mortality) ~ surv, data = aggregate_means[interval == intvl])
summary(fit1_1)
intvl = 9
fit1 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl])
fit1_1 = lm(log(mortality) ~ surv, data = aggregate_means[interval == intvl])
summary(fit1)
summary(fit1_1)
fit1 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
summary(fit1)
intvl = 2
fit1 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
summary(fit1)
qqplot(fit1)
fit1 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
qqnorm(fit1)
fit1_ar = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
fit1_ = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl])
summary(fit1_ar)
summary(fit1)
summary(fit1_)
qqnorm(fit1_)
qqnorm(fit1_ar)
intvl = 9
fit1_ar = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
fit1_ = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl])
summary(fit1_ar)
summary(fit1_)
aic(fit1_ar)
AIC(fit1_ar)
fit1_ar_9 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
intvl = 2
fit1_ar_2 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
intvl = 9
fit1_ar_9 = gls(log(mortality) ~ surv, data = aggregate_means[interval == intvl], correlation = corAR1(form = ~year))
AIC(fit1_ar_9)
AIC(fit1_ar_2)
require(mgcv)
intvl = 4
dat = aggregate_means[interval == intvl]
dat
fit1 = gam(morality ~ surv)
fit1 = gam(morality ~ surv, data = dat)
fit1 = gam(mortality ~ surv, data = dat)
plot(fit1, se = T)
fit1 = gam(mortality ~ surv, data = dat)
summary(fit1)
plot(fit1, se = T)
fit1 = gam(mortality ~ s(surv), data = dat)
summary(fit1)
plot(fit1, se = T)
intvl = 8
dat = aggregate_means[interval == intvl]
dat
fit1 = gam(mortality ~ s(surv), data = dat)
summary(fit1)
plot(fit1, se = T)
dat
ggplot(dat, aes(x = surv, y = mortality)) + geom_point()
plot(fit1, se = T)
fit1 = gam(mortality ~ surv, data = dat)
plot(fit1, se = T)
summary(fit1)
pred1 = predict(fit1, se = TRUE, type = "response")
I1 = order(dat$surv)
stat_smooth(method = "gam", formula =mortality ~ s(surv), data = dat, size = 1)
ggplot(dat, aes(x = surv, y = mortality)) + geom_point() +
stat_smooth(method = "gam", formula =mortality ~ s(surv), data = dat, size = 1)
ggplot(dat, aes(x = surv, y = mortality)) + geom_point() +
stat_smooth(method = "gam", formula = mortality ~ s(surv), size = 1)
plt1 = ggplot(dat, aes(x = surv, y = mortality)) + geom_point()
stat_smooth(method = "gam", formula = mortality ~ s(surv), size = 1)
sm = stat_smooth(method = "gam", formula = mortality ~ s(surv), size = 1)
plt1 + sm
p + stat_smooth(method = "gam", formula = mortality ~ s(surv), size = 1)
plt1 + stat_smooth(method = "gam", formula = mortality ~ s(surv), size = 1)
plt1
plt1 + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
intvl = 1
dat = aggregate_means[interval == intvl]
plt1 = ggplot(dat, aes(x = surv, y = mortality)) + geom_point()
plt1 = ggplot(dat, aes(x = surv, y = mortality)) + geom_point()
sm = stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
plt1 + sm
intvl = 10
dat = aggregate_means[interval == intvl]
plt1 = ggplot(dat, aes(x = surv, y = mortality)) + geom_point()
sm = stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
plt1 + sm
aggregate_means
aggregate_means$interval
table(aggregate_means$interval)
intervals =  1:16
fit1 = gam(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ time))
summary(fit1)
fit1 = gam(mortality ~ s(surv), data = dat)
fit1_ar = gam(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ time))
summary(fit1_ar)
fit1 = gam(mortality ~ s(surv), data = dat)
fit1_ar = gam(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ time))
summary(fit1_ar)
summary(fit1)
fit1_ar = gam(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ year))
summary(fit1_ar)
fit1_ar = gam(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ year))
summary(fit1_ar)
summary(fit1)
fit1_ar = gamm(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ year))
fit1 = gamm(mortality ~ s(surv), data = dat)
fit1_ar = gamm(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ year))
summary(fit1_ar)
summary(fit1)
plot(fit1)
plot(fit1$gam)
fit1_ar = gam(mortality ~ s(surv), data = dat, correlations = corAR1(form = ~ year))
fit1_ar = gam(mortality ~ s(surv), data = dat, correlationssdfsdf = corAR1(form = ~ year))
fit1_ar = gam(mortality ~ s(surv), data = dat, cor = corAR1(form = ~ year))
plot(fit1_ar)
fit1 = gam(mortality ~ s(surv), data = dat)
plot(fit1)
fit1_ar = gamm(mortality ~ s(surv), data = dat, cor = corAR1(form = ~ year))
plot(fit1_ar$gam)
plot(fit1_ar$lme)
rm(list = ls())
require(ggplot2)
require(raster)
require(rgdal)
require(rgeos)
require(ncdf4)
require(forecast)
require(mgcv)
require(data.table)
require(nlme)
data_dir = "C:/github/MPB_Overwintering_Projects/data/"
aggregate_means = fread(paste0(data_dir, "aggregate_forests/aggregate_means.csv"))
#### gamm after Zuur 2009
intvl = 10
dat = aggregate_means[interval == intvl]
fit1 = gamm(mortality ~ s(surv), data = dat)
fit1_ar = gamm(mortality ~ s(surv), data = dat, cor = corAR1(form = ~ year))
plot(fit1$gam)
plot(fit1_ar$gam)
fit1 = gam(mortality ~ s(surv), data = dat)
plot(fit1)
gamm_1 = gamm(mortality ~ s(surv), data = dat, knots = 3)
plot(gamm_1$gam)
gamm_1 = gamm(mortality ~ s(surv), data = dat, knots = 3)
dat
summary(gamm_1$gam)
gamm_1 = gamm(mortality ~ s(surv), data = dat, knots = 3)
gamm_1_ar = gamm(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ year))
gamm_1 = gamm(mortality ~ s(surv), data = dat, knots = 2)
gamm_1 = gamm(mortality ~ s(surv), data = dat, knots = 6)
gamm_1 = gamm(mortality ~ s(surv), data = dat)
plot(gamm_1$gam)
summary(gamm_1$gam)
fit1 = gam(mortality ~ s(surv), data = dat)
summary(fit1)
plot(gamm_1$lme)
gamm_1_ar = gamm(mortality ~ s(surv), data = dat, correlation = corAR1(form = ~ year))
plot(gamm_1_ar$lme)
gamm_1 = gamm(mortality ~ s(surv, bs = "cr"), data = dat)
plot(gamm_1$gam)
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr"), data = dat, correlation = corAR1(form = ~ year))
plot(gamm_1_ar$gam)
gamm_1 = gamm(mortality ~ s(surv, bs = "cr"), data = dat)
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr"), data = dat, correlation = corAR1(form = ~ year))
plot(gamm_1$gam)
plot(gamm_1_ar$gam)
gamm_1 = gamm(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1))
gamm_1 =    gamm(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1))
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
plot(gamm_1$gam)
plot(gamm_1_ar$gam)
summary(gamm_1_ar$gam)
summary(gamm_1$gam)
gam_1 =    gamm(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1))
gam_1_ar = gamm(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
plot(gam_1_ar)
gam_1 =    gam(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1))
gam_1 =    gam(mortality ~ s(surv, bs = "cr"), data = dat)
gam_1_ar = gam(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
gam_1_ar = gam(mortality ~ s(surv, bs = "cr"), data = dat, correlation = corAR1(form = ~ year))
plot(gam_1_ar)
plot(gam_1)
anova(gam_1, gam_1_ar)
anova(gamm_1, gamm_1_ar)
anova(gamm_1$gam, gamm_1_ar$gam)
AIC(gamm_1$gam, gamm_1_ar$gam)
AIC(gamm_1$lme, gamm_1_ar$lme)
AIC(gam_1)
AIC(gam_1_ar)
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr", k = 2), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
summary(gamm_1_ar$gam)
plot(gamm_1_ar$gam)
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr", k = 4), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
plot(gamm_1_ar$gam)
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr", k = 14), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
plot(gamm_1_ar$gam)
plot(gamm_1$gam)
plot(gamm_1_ar$gam)
plot(gamm_1$gam)
gamm_1 =    gamm(mortality ~ te(surv, bs = "cr", k = 2), data = dat, weights = varIdent(form = ~1))
summary(gamm_1_ar$gam)
plot(gamm_1_ar$gam)
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr", k = 14), data = dat, weights = varIdent(form = ~1), correlation = corAR1())
summary(gamm_1_ar$gam)
dat
#### gamm after Zuur 2009
intvl = 6
gamm_1 =    gamm(mortality ~ te(surv, bs = "cr", k = 2), data = dat, weights = varIdent(form = ~1))
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr", k = 14), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
gamm_1 =    gamm(mortality ~ te(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1))
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
plot(gamm_1$gam)
plot(gamm_1_ar$gam)
dat
#### gamm after Zuur 2009
intvl = 6
table(aggregate_means$interval)
dat = aggregate_means[interval == intvl]
dat
gamm_1 =    gamm(mortality ~ te(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1))
gamm_1_ar = gamm(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1), correlation = corAR1(form = ~ year))
plot(gamm_1$gam)
plot(gamm_1_ar$gam)
plot(gamm_1$gam)
plot(gamm_1_ar$gam)
gamm_1 =    gamm(mortality ~ s(surv, bs = "cr"), data = dat, weights = varIdent(form = ~1))
plot(gamm_1$gam)
plot(gamm_1_ar$gam)
aggregate_means = fread(paste0(data_dir, "aggregate_forests/aggregate_means.csv"))
aggregate_means$log_mortality = aggregate_means[, log(mortality)]
rm(list = ls())
require(ggplot2)
require(rgdal)
require(ncdf4)
require(raster)
require(rgeos)
require(data.table)
require(ggplot2)
require(rgdal)
require(rgeos)
require(raster)
require(ncdf4)
require(data.table)
require(forecast)
data_dir = "C:/github/MPB_Overwintering_Projects/data/"
aggregate_means = fread(paste0(data_dir, "aggregate_forests/aggregate_means.csv"))
aggregate_means$log_mortality = aggregate_means[, log(mortality)]
i = 1
arimas = vector(mode = "list", length = 16)
log_arimas = vector(mode = "list", length = 16)
#### Choose arima order
i = 4
arima(mortality, xreg = surv, data = aggregate_means[interval == i])
arima(dat$mortality, dat$xreg = surv )
arima(dat$mortality, xreg = dat$surv, order = c(0, 0, 0))
dat = aggregate_means[interval == i]
arima(dat$mortality, xreg = dat$surv, order = c(0, 0, 0))
arima_0(dat$mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_0 = arima(dat$mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_1 = arima(dat$mortality, xreg = dat$surv, order = c(1, 0, 0))
ar_2 = arima(dat$mortality, xreg = dat$surv, order = c(2, 0, 0))
AIC(ar_0, ar_1, ar_2)
anova(ar_0, ar_1, ar_2)
#### Choose arima order
i = 8
dat = aggregate_means[interval == i]
ar_0 = arima(dat$mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_1 = arima(dat$mortality, xreg = dat$surv, order = c(1, 0, 0))
ar_2 = arima(dat$mortality, xreg = dat$surv, order = c(2, 0, 0))
AIC(ar_0, ar_1, ar_2)
#### Choose arima order
i = 8
dat = aggregate_means[interval == i]
ar_0 = arima(dat$log_mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_1 = arima(dat$log_mortality, xreg = dat$surv, order = c(1, 0, 0))
ar_2 = arima(dat$log_mortality, xreg = dat$surv, order = c(2, 0, 0))
AIC(ar_0, ar_1, ar_2)
arimas_log_aic_test = vector(mode = "list", length = 16)
list(ar_0, ar_1, ar_2)
arimas_log_aic_test[[i]] = list(ar_0, ar_1, ar_2)
for(i in 1:3)
{
print(i)
dat = aggregate_means[interval == i]
ar_0 = arima(dat$log_mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_1 = arima(dat$log_mortality, xreg = dat$surv, order = c(1, 0, 0))
ar_2 = arima(dat$log_mortality, xreg = dat$surv, order = c(2, 0, 0))
arimas_log_aic_test[[i]] = list(ar_0, ar_1, ar_2)
}
for(i in 1:16)
{
print(i)
dat = aggregate_means[interval == i]
ar_0 = arima(dat$log_mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_1 = arima(dat$log_mortality, xreg = dat$surv, order = c(1, 0, 0))
ar_2 = arima(dat$log_mortality, xreg = dat$surv, order = c(2, 0, 0))
arimas_log_aic_test[[i]] = list(ar_0, ar_1, ar_2)
}
arimas_log_aic_test
AIC(ar_0, ar_1, ar_2)
arimas_log_aic_test = vector(mode = "list", length = 16)
for(i in 1:16)
{
print(i)
dat = aggregate_means[interval == i]
ar_0 = arima(dat$log_mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_1 = arima(dat$log_mortality, xreg = dat$surv, order = c(1, 0, 0))
ar_2 = arima(dat$log_mortality, xreg = dat$surv, order = c(2, 0, 0))
arimas_log_aic_test[[i]] = AIC(ar_0, ar_1, ar_2)
# arimas_log_aic_test[[i]] = list(ar_0, ar_1, ar_2)
}
arimas_log_aic_test
aic_tests = data.frame()
AIC(ar_0, ar_1, ar_2)
AIC(ar_0, ar_1, ar_2)$AIC
c(i, AIC(ar_0, ar_1, ar_2)$AIC)
rbind(aic_tests, c(i, AIC(ar_0, ar_1, ar_2)$AIC))
aic_tests = data.frame()
for(i in 1:16)
{
print(i)
dat = aggregate_means[interval == i]
ar_0 = arima(dat$log_mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_1 = arima(dat$log_mortality, xreg = dat$surv, order = c(1, 0, 0))
ar_2 = arima(dat$log_mortality, xreg = dat$surv, order = c(2, 0, 0))
arimas_log_aic_test[[i]] = AIC(ar_0, ar_1, ar_2)$AIC
aic_tests = rbind(aic_tests, c(i, AIC(ar_0, ar_1, ar_2)$AIC))
# arimas_log_aic_test[[i]] = list(ar_0, ar_1, ar_2)
}
aic_tests
apply(aic_tests, 2, mean)
apply(aic_tests[4:16, ], 2, mean)
apply(aic_tests[10:16, ], 2, mean)
auto.arima(dat$log_mortality, xreg = dat$surv)
i
aic_tests(ar_0, ar_1, ar_2)
arimas_log_aic_test
apply(aic_tests[10:16, ], 2, mean)
plot(aic_tests[, 1], aic_tests[, 3])
plot(aic_tests[, 1], aic_tests[, 2])
plot(aic_tests[, 1], aic_tests[, 3])
plot(aic_tests[, 1], aic_tests[, 4])
plot(aic_tests[, 1], aic_tests[, 2])
arimas_log_aic_test[[i]][[1]]
arimas_log_aic_test[[i]]
for(i in 1:16)
{
print(i)
dat = aggregate_means[interval == i]
ar_0 = arima(dat$log_mortality, xreg = dat$surv, order = c(0, 0, 0))
ar_1 = arima(dat$log_mortality, xreg = dat$surv, order = c(1, 0, 0))
ar_2 = arima(dat$log_mortality, xreg = dat$surv, order = c(2, 0, 0))
aic_tests = rbind(aic_tests, c(i, AIC(ar_0, ar_1, ar_2)$AIC))
arimas_log_aic_test[[i]] = list(ar_0, ar_1, ar_2)
}
arimas_log_aic_test[[i]]
plot(arimas_log_aic_test[[i]][1])
plot(arimas_log_aic_test[[i]][[1]])
residuals(arimas_log_aic_test[[i]][[1]])
plot(residuals(arimas_log_aic_test[[i]][[1]]))
plot(residuals(arimas_log_aic_test[[i]][[1]])); abline(h = 0)
plot(residuals(arimas_log_aic_test[[i]][[2]])); abline(h = 0)
plot(residuals(arimas_log_aic_test[[i]][[3]])); abline(h = 0)
arimas = vector(mode = "list", length = 16)
log_arimas = vector(mode = "list", length = 16)
# for (i in 1:16)
for (i in c(1, 4, 8))
{
dat_i = aggregate_means[interval == i]
arimas[[i]] = auto.arima(dat_i$mortality, xreg = c(dat_i$surv))
log_arimas[[i]] = auto.arima(dat_i$log_mortality, xreg = c(dat_i$surv))
}
arimas = vector(mode = "list", length = 16)
log_arimas = vector(mode = "list", length = 16)
for (i in 1:16)
# for (i in c(1, 4, 8))
{
dat_i = aggregate_means[interval == i]
arimas[[i]] = auto.arima(dat_i$mortality, xreg = c(dat_i$surv))
log_arimas[[i]] = auto.arima(dat_i$log_mortality, xreg = c(dat_i$surv))
}
log_arimas
log_arimas[[i]]$residuals
plot(log_arimas[[i]]$residuals)
i = 2
plot(log_arimas[[i]]$residuals)
log_arimas[[i]]$residuals
log_arimas[[i]]
i = 8
plot(log_arimas[[i]]$residuals)
log_arimas[[i]]
i = 10
plot(log_arimas[[i]]$residuals)
log_arimas[[i]]
shapiro.test(log_arimas[[i]]$residuals)
i = 16
shapiro.test(log_arimas[[i]]$residuals)
require(lmtest)
dwtest(log_arimas[[i]]$residuals ~ 1:16)
log_arimas[[i]]$residuals
dwtest(log_arimas[[i]]$residuals[] ~ 1:16)
log_arimas[[i]]$residuals
dwtest(log_arimas[[i]]$residuals[] ~ 1:14)
dwtest(log_arimas[[i]]$residuals[] ~ 1:(length(log_arimas[[i]]$residuals)))
c(log_arimas[[i]]$residuals)
dwtest(c(log_arimas[[i]]$residuals[]) ~ 1:(length(log_arimas[[i]]$residuals)))
data.frame(c(log_arimas[[i]]$residuals[]), 1:length(c(log_arimas[[i]]$residuals[])))
res_dat = data.frame(resid = c(log_arimas[[i]]$residuals[]), obs = 1:length(c(log_arimas[[i]]$residuals[])))
dwtest(resid ~ obs, data = res_dat)
i
i = 10
res_dat = data.frame(resid = c(log_arimas[[i]]$residuals[]), obs = 1:length(c(log_arimas[[i]]$residuals[])))
dwtest(resid ~ obs, data = res_dat)
rm(list = ls())
rm(list = ls())
load("data/models.Rd")
load("../data/models.Rd")
require(lmtest)
require(data.table)
require(grid)
require(gridExtra)
require(gtable)
require(ggplot2)
require(forecast)
